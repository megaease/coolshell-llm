Question: 编程中的类型命名设计有哪些原则？
类型命名(类，接口，和结构)
名字应该尽量采用名词：Bad: Happy, Good: Happiness
不要使用类似名字空间的前缀: Bad: SystemOnlineMessage, Good: System::Online:Message
形容词不要用太多，能描述清楚就行: Bad: IAbstractFactoryPatternBase, Good: IFactory
在类型中不要使用Manager 或则 Helper 或则其他没意义的单词。 Bad: ConnectionManager, Good: Connection.
如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名: Bad: IncomingMessageQueue, Good: Mailbox
如果你使用类比，你就应该一致的使用它们: Bad: Mailbox,DestinationID, Good: Mailbox,Address
来自：酷壳网 CoolShell


Question: 编程中的函数命名设计有哪些原则？
函数(方法和过程)
简洁 Bad: list.GetNumberOfItems(), Good: list.Count()
不要太简洁 Bad: list.Verify(), Good: list.ContainsNull()
避免缩写 Bad: list.Srt(), Good: list.Sort()
对于完成某件事情的函数使用动词 Bad: obj.RefCount(), Good: list.Clear()
对于返回布尔型的函数，使用类似提问的方式 Bad: list.Empty(), Good: list.IsEmpty()
对于只是返回属性，而不改变状态的函数则使用名词 Bad: list.GetCount(), Good: list.Count()
不要在函数名字中重复参数的名称 Bad: list.AddItem(item), Good: list.Add(item)
不要方法的名字中重复此方法的类的名称 Bad: list.AddToList(item) Good: list.Add(item)
不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别 Bad: list.GetCountInt(), Good: list.GetCount()
不要名字中使用And 或则 Or, 如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情。Bad: mail.VerifyAddressAndSendStatus(); Good: mail.VerifyAddress()
来自：酷壳网 CoolShell


Question: 编程中的类型设计有哪些原则？
类型命名(类，接口，和结构)：
名字应该尽量采用名词
不要使用类似名字空间的前缀
形容词不要用太多，能描述清楚就行
在类型中不要使用Manager 或则 Helper 或则其他没意义的单词。
如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名
如果你使用类比，你就应该一致的使用它们。
函数(方法和过程)：
简洁
不要太简洁
避免缩写
对于完成某件事情的函数使用动词
对于返回布尔型的函数，使用类似提问的方式
对于只是返回属性，而不改变状态的函数则使用名词
不要在函数名字中重复参数的名称
不要方法的名字中重复此方法的类的名称
不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别
不要名字中使用And 或则 Or, 如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情。
来自：酷壳网 CoolShell